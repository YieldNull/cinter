NEWLINE ::= "\r"? "\n"
WS      ::= " "|"\t"

IF	    ::=	"if"
ELSE	::=	"else"
WHILE	::=	"while"
READ	::=	"read"
WRITE	::=	"write"
INT	    ::=	"int"
REAL	::=	"real"
RETURN  ::= "return"
VOID    ::= "void"
PLUS	::=	"+"
MINUS	::=	"-"
TIMES	::=	"*"
DIVIDE	::=	"/"
ASSIGN	::=	"="

LT	::=	"<"
GT	::=	">"
EQUAL	::=	"=="
NEQUAL	::=	"<>"

LPAREN	    ::=	"("
RPAREN	    ::=	")"
LBRACE	    ::=	"{"
RBRACE	    ::=	"}"
LBRACKET    ::=	"["
RBRACKET    ::=	"]"

ROWCOMM	    ::=	"//"
MULCOMM	    ::=	"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/"
COMMA	    ::=	","
SEMICOLON   ::=	";"

LETTER	    ::=	["a"-"z"]|["A"-"Z"]
DIGIT	    ::=	["0"-"9"]
ID	        ::=	<LETTER> ( ( <LETTER> | <DIGIT> | "_" ) * ( <LETTER> | <DIGIT> ) )?
INT_LITERAL ::=	["1"-"9"] (<DIGIT>)* | "0"
REAL_LITERAL::=	<INT_LITERAL> ( "."( <INT_LITERAL> )+ )?

program	    ::=	exterStmts
exterStmts  ::= ( declareStmt | FuncDefStmt)*
innerStmts   ::= ( ifStmt | whileStmt | declareStmt | assignStmt | funcCallStmt | returnStmt )*

declareStmt ::= dataType <ID>  ( <COMMA> <ID> )* <SEMICOLON>
assignStmt  ::= <ID> (array)? <ASSIGN> expression <SEMICOLON>
ifStmt	    ::=	<IF> <LPAREN> condition <RPAREN> <LBRACE> innerStmts <RBRACE> ( <ELSE> <LBRACE> innerStmts <RBRACE> )?
whileStmt   ::= <WHILE> <LPAREN> condition <RPAREN> <LBRACE> innerStmts <RBRACE>

funcDefStmt         ::= returnType  <ID>  <LPAREN> ( FuncDefParamList )?  <RPAREN> <LBRACE> innerStmts <RBRACE>
funcDefParam        ::=  dataType <ID>
funcDefParamList    ::= ( funcDefParam ( <COMMA> funcDefParam )* | <VOID> )
funcCallStmt        ::= <ID> <LPAREN> ( funcCallParamList )?  <RPAREN> <SEMICOLON>
funcCallParamList   ::= ( expr   ( <COMMA> expr  )* | <VOID> )
funcType            ::= <VOID>  | dataType
returnStmt          ::= <RETURN> expression <SEMICOLON>

dataType    ::= ( <INT> | <REAL> ) (array)?
array       ::=	<LBRACKET> ( <INT_LITERAL> | <ID> )? <RBRACKET>

condition	::=	expression compOp expression
expression  ::=	term (addOp term)*
term	    ::=	factor (mulOp factor)*
factor	    ::= <REAL_LITERAL> | <INT_LITERAL> | <ID> ( array )? | <LPAREN> expression <RPAREN>

compOp      ::=	<LT> | <GT> | <EQUAL> | <NEQUAL>
addOp	    ::=	<PLUS> | <MINUS>
mulOp	    ::=	<TIMES> | <DIVIDE>
