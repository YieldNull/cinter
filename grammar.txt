NEWLINE ::= "\r"? "\n"
WS      ::= " "|"\t"

IF	    ::=	"if"
ELSE	::=	"else"
WHILE	::=	"while"
READ	::=	"read"
WRITE	::=	"write"
INT	    ::=	"int"
REAL	::=	"real"
RETURN  ::= "return"
VOID    ::= "void"
PLUS	::=	"+"
MINUS	::=	"-"
TIMES	::=	"*"
DIVIDE	::=	"/"
ASSIGN	::=	"="

LT	::=	"<"
GT	::=	">"
EQUAL	::=	"=="
NEQUAL	::=	"<>"

LPAREN	    ::=	"("
RPAREN	    ::=	")"
LBRACE	    ::=	"{"
RBRACE	    ::=	"}"
LBRACKET    ::=	"["
RBRACKET    ::=	"]"

ROWCOMM	    ::=	"//"
MULCOMM	    ::=	"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/"
COMMA	    ::=	","
SEMICOLON   ::=	";"

LETTER	    ::=	["a"-"z"]|["A"-"Z"]
DIGIT	    ::=	["0"-"9"]
ID	        ::=	<LETTER> ( ( <LETTER> | <DIGIT> | "_" ) * ( <LETTER> | <DIGIT> ) )?
INT_LITERAL ::=	["1"-"9"] (<DIGIT>)* | "0"
REAL_LITERAL::=	<INT_LITERAL> ( "."( <INT_LITERAL> )+ )?

program	    ::=	exterStmts
exterStmts  ::= ( declareStmt | funcDeclStmt )+
innerStmts  ::= ( declareStmt | assignStmt | ifStmt | whileStmt | funcCallStmt | returnStmt )*

declareStmt ::=	( <INT> | <REAL> ) <ID> [array] ( <COMMA> <ID> [array] )* <SEMICOLON>
assignStmt  ::=	<ID> [array] <ASSIGN> expression <SEMICOLON>
ifStmt	    ::=	<IF> <LPAREN> condition <RPAREN> <LBRACE> innerStmts <RBRACE> ( <ELSE> <LBRACE> innerStmts <RBRACE> )?
whileStmt   ::=	<WHILE> <LPAREN> condition <RPAREN> <LBRACE> innerStmts <RBRACE>

funcDeclStmt        ::= returnType <ID> <LPAREN> funcDeclParams  <RPAREN> <LBRACE> innerStmts <LBRACE>
funcCallStmt        ::= <ID> <LPAREN> funcCallParams  <RPAREN> <SEMICOLON>
funcDeclParam       ::= ( <INT> | <REAL> ) <ID>[array]
funcDeclParamList   ::= ( funcDeclParam ( <COMMA> funcDeclParam )* )?
funcCallParamList   ::= ( <ID>  ( <COMMA> <ID> )* )?
returnStmt          ::= <RETURN> expression <SEMICOLON>
returnType          ::= ( <INT> | <REAL> | <VOID>)

array 	::=	<LBRACKET> ( <INT_LITERAL> | <ID> ) <RBRACKET>

condition	::=	expression compOp expression
expression  ::=	term (addOp term)*
term	    ::=	factor (mulOp factor)*
factor	    ::=	<REAL_LITERAL> | <INT_LITERAL> | <ID> | <LPAREN> expression <RPAREN> | <ID> array

compOp      ::=	<LT> | <GT> | <EQUAL> | <NEQUAL>
addOp	    ::=	<PLUS> | <MINUS>
mulOp	    ::=	<TIMES> | <DIVIDE>
